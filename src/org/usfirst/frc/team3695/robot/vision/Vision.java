package org.usfirst.frc.team3695.robot.vision;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc.team3695.robot.Grip;
import org.usfirst.frc.team3695.robot.util.Logger;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.first.wpilibj.CameraServer;

public class Vision extends Thread {
	/**
	 * Camera constant setup setting 
	 */
	public static final int 
			CAM_EXPOSURE = 0,
			CAM_WHITE = 50,
			CAM_BRIGHT = 50,
			CAM_FPS = 30,
			CAM_WIDTH = 640,
			CAM_HEIGHT = 480;
	
	/**
	 * Color constant in OpenCV form
	 */
	public static final Scalar 
			BLACK 	= new Scalar(0.0,	0.0,	0.0),
			RED		= new Scalar(0.0,	0.0,	255.0),
			GREEN	= new Scalar(0.0,	255.0,	0.0),
			YELLOW	= new Scalar(0.0,	255.0,	255.0),
			BLUE	= new Scalar(255.0,	0.0,	0.0),
			MAGENTA	= new Scalar(255.0,	0.0,	255.0),
			CYAN	= new Scalar(255.0,	255.0,	0.0),
			WHITE 	= new Scalar(255.0,	255.0,	255.0);
	
	/**
	 * The server name for the stream. Required by FRC to be "unique"
	 */
	private static final String SERVER_NAME = "Stream"; 
	
	/**
	 * Current camera that is showing video
	 */
	private Camera running;
	
	/**
	 * View of the feed. (viewing what the robot sees or viewing the raw feed)
	 */
	private Video view = Video.RAW;
	
	/**
	 * This sink controls the input camera. Only one sink is needed, but can switch between
	 * many USB cams.
	 */
	private final CvSink sink = new CvSink("Team3695 CvSink");
	
	/**
	 * Our pipeline as generated by Grip
	 */
	private final Grip grip = new Grip();
	
	/**
	 * Utility matrix for showing when there is no feed on a camera
	 */
	private final Mat noFeed = new Mat(CAM_WIDTH, CAM_HEIGHT, CvType.CV_8UC3);
	

	/**
	 * Sets a no feed message.
	 * @param name The name of the device that has no feed.
	 * @param debug A message to show to the user for debug info.
	 */
	private void warn(String name, String debug) {
		noFeed.setTo(BLACK);
		Imgproc.putText(noFeed, name + ": NO FEED", new Point(0,0), Core.FONT_HERSHEY_PLAIN, 24.0, RED);
		Imgproc.putText(noFeed, debug, new Point(0, 48), Core.FONT_HERSHEY_PLAIN, 12.0, WHITE);
	}
	
	/**
	 * Initialize a camera
	 */
	private boolean init(Camera cam) {
		if(cam.usb.isConnected()) {
			Logger.out("..." + cam.usb.getName() + " is online!");
		} else {
			Logger.err("..." + cam.usb.getName() + " is offline! Reason: disconnected!");
			return false;
		}
		
		Logger.debug("BRIGHTNESS " + cam.usb.getBrightness());
		cam.usb.setExposureManual(CAM_EXPOSURE);
		cam.usb.setWhiteBalanceManual(CAM_WHITE);
		cam.usb.setBrightness(CAM_BRIGHT);
		cam.usb.setResolution(CAM_WIDTH, CAM_HEIGHT);
		cam.usb.setFPS(CAM_FPS);
		return true;
	}
	
	/**
	 * Switches the camera thread to process the sent camera.
	 * @param cam the camera to switch the processing to.
	 */
	public synchronized void setCamera(Camera cam) {
		sink.setSource(cam.usb);
		running = cam;
	}
	
	/**
	 * Switches the robot from a raw view to an image recognition "debug"
	 * view.
	 * @param view The view to switch the robot to
	 */
	public synchronized void setView(Video view) {
		this.view = view;
	}

	public void run() {
		Logger.out("Starting camera thread...");
		Mat source = new Mat();
		Mat result;
		
		Logger.out("Starting cameras...");
		init(Camera.FRONT);
		init(Camera.REAR);
		
		Logger.out("Starting video...");
		setCamera(Camera.FRONT);
		
		Logger.out("Starting raw camera view...");
		setView(Video.RAW);
		
		Logger.out("Starting server...");
		CvSource output = CameraServer.getInstance().putVideo(SERVER_NAME, CAM_WIDTH, CAM_HEIGHT);
		
		Logger.out("Startup complete!");
		
		while(!interrupted()) {
			long time = sink.grabFrame(source);
			
			//if there is an error, show it.
			if(time == 0) {
				warn(running.usb.getName(), sink.getError());
				output.putFrame(noFeed);
				try { Thread.sleep((long)(1000.0/30.0));} 
				catch (InterruptedException e) {e.printStackTrace();}
				continue;
			}
			
			//Display raw feed if chosen.
			if(view == Video.RAW)  {
				Imgproc.putText(source, running.usb.getName(), new Point(0,0), Core.FONT_HERSHEY_PLAIN, 12.0, WHITE);
				output.putFrame(source);
				continue;
			}
			
			//Process with grip if we are not displaying the raw feed.
			grip.process(source);
			//we can do something with grip here!
			
			//Switch to correct feed.
			switch(view) {
			case BLUR:
				result = grip.blurOutput();
				break;
			case ERODE:
				result = grip.cvErodeOutput();
				break;
			case THRESHHOLD:
				result = grip.hsvThresholdOutput();
				break;
			default:
				warn(view.name(), "This method is not defined.");
				result = noFeed;
				break;
			}
			
			//Extra UI information.
			Imgproc.putText(result, running.usb.getName() + ": " + view.name(), new Point(0,0), Core.FONT_HERSHEY_PLAIN, 12.0, WHITE);
			output.putFrame(result);
		}
	}
}
